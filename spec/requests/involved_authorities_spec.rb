require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/involved_authorities", type: :request do

  # InvolvedAuthority. As you add validations to InvolvedAuthority, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    w = create(:work)
    p = create(:person)
    {item_id: w.id,
    item_type: 'Work',
    authority_id: p.id,
    authority_type: 'Person',
    role: :illustrator}
  }

  let(:invalid_attributes) { {
    item_id: nil,
    authority_id: nil,
    role: :illustrator}
  }

  describe "GET /index" do
    it "renders a successful response" do
      InvolvedAuthority.create! valid_attributes
      fake_editor(InvolvedAuthoritiesController)
      get involved_authorities_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      involved_authority = InvolvedAuthority.create! valid_attributes
      fake_editor(InvolvedAuthoritiesController)
      get involved_authority_url(involved_authority)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      fake_editor(InvolvedAuthoritiesController)
      get new_involved_authority_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      involved_authority = InvolvedAuthority.create! valid_attributes
      fake_editor(InvolvedAuthoritiesController)
      get edit_involved_authority_url(involved_authority)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new InvolvedAuthority" do
        fake_editor(InvolvedAuthoritiesController)
        expect {
          post involved_authorities_url, params: { involved_authority: valid_attributes }
        }.to change(InvolvedAuthority, :count).by(2) # the Work factory creates one too
      end

      it "redirects to the created involved_authority" do
        fake_editor(InvolvedAuthoritiesController)
        post involved_authorities_url, params: { involved_authority: valid_attributes }
        expect(response).to redirect_to(involved_authority_url(InvolvedAuthority.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new InvolvedAuthority" do
        fake_editor(InvolvedAuthoritiesController)
        expect {
          post involved_authorities_url, params: { involved_authority: invalid_attributes }
        }.to change(InvolvedAuthority, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        fake_editor(InvolvedAuthoritiesController)
        post involved_authorities_url, params: { involved_authority: invalid_attributes }
        expect(response.status).to eql 422
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { role: :author}
      }

      it "updates the requested involved_authority" do
        involved_authority = InvolvedAuthority.create! valid_attributes
        fake_editor(InvolvedAuthoritiesController)
        patch involved_authority_url(involved_authority), params: { involved_authority: new_attributes }
        involved_authority.reload
        assert(involved_authority.role == 'author')
      end

      it "redirects to the involved_authority" do
        involved_authority = InvolvedAuthority.create! valid_attributes
        fake_editor(InvolvedAuthoritiesController)
        patch involved_authority_url(involved_authority), params: { involved_authority: new_attributes }
        involved_authority.reload
        expect(response).to redirect_to(involved_authority_url(involved_authority))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        involved_authority = InvolvedAuthority.create! valid_attributes
        fake_editor(InvolvedAuthoritiesController)
        patch involved_authority_url(involved_authority), params: { involved_authority: invalid_attributes }
        expect(response.status).to eql 422
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested involved_authority" do
      involved_authority = InvolvedAuthority.create! valid_attributes
      fake_editor(InvolvedAuthoritiesController)
      expect {
        delete involved_authority_url(involved_authority)
      }.to change(InvolvedAuthority, :count).by(-1)
    end

    it "redirects to the involved_authorities list" do
      involved_authority = InvolvedAuthority.create! valid_attributes
      fake_editor(InvolvedAuthoritiesController)
      delete involved_authority_url(involved_authority)
      expect(response).to redirect_to(involved_authorities_url)
    end
  end
end
