.top-element.backend

  .container-fluid
    .row
      .col-md-6
        %h1= t(:bib_workshop)
        %p= t(:pubs_by_person_instructions_html)
      .col-md-6
        %h2= t(:some_authors_to_work_on)
        %p
          - Person.has_toc.bib_not_done.order('RAND()').limit(20).map{|p| p.name}.each do |p|
            %span.copyme.pointer= p
            = '; '

    .row
      .col-md-6{style: 'overflow-x: scroll'}
        = render partial: 'find_bibs', locals: {remote: true}
        %h3#total_pubs= t(:total)

        %table#bibs{style:}
          %tr
            %th= t(:title)
            %th= t(:author)
            %th= t(:publisher)
            %th= t(:year_published)
            %th= t(:language)
            %th= t(:comments)
            %th= t(:record_source)
            %th= t(:location)
            %th= t(:is_scanned)
            %th= t(:actions)
          = render partial: 'pubs', locals: {pubs: @pubs}
      .col-md-6{style: 'overflow-x: scroll'}
        .backend-field
          = label_tag t(:linked_author)
          = hidden_field_tag :person_id
          = autocomplete_field_tag :person, '', autocomplete_person_name_path, id_element: '#person_id', scopes: [:bib_not_done], 'data-noMatchesLabel' => t(:no_matches_found)
        = link_to t(:new_author), authors_new_path
        .card
          .card-content
            %h2
              %a#author_link
                = t(:pubs_by_author)
            %table#pubs
              %tbody
    .row
      .col-md-12
        = link_to t(:back_to_bib_workshop), action: :index
:javascript
  function moveit(elem){
    var person_id = $('#person_id').val();
    if (person_id == null || person_id == "") {
      alert("#{t(:select_person_first)}");
    } else {
      var row = elem.parentElement.parentElement;
      var status = (row.children[8].textContent == "#{t(:yes)}" ? "scanned" : "todo");
      elem.disabled = true;
      $.ajax({
          type: "POST",
          url: "#{publications_path}",
          data: { publication: {title: row.children[0].textContent , author_line: row.children[1].textContent, publisher_line: row.children[2].textContent,
            pub_year: row.children[3].textContent, language: row.children[4].textContent,
            notes: row.children[5].textContent, bib_source: row.children[6].textContent, source_id: row.children[6].children[0].href, callnum: row.children[7].textContent,
            person_id: person_id, status: status } },
          dataType: "script"
        }).done(function(xhr, status) {
          if(status == "success") {
            row.remove();
          } else {
            alert('error');
            elem.disabled = false;
          }
        });
    }
  };
  function addholding(elem){
    var sels = $('.publine.pub_selected');
    if (sels.size() == 0) {
      alert("#{t(:select_publication_first)}");
    } else {
      // gather data
      var pub_row = $(sels)[0]; // target
      var holding_row = elem.parentElement.parentElement; // source
      elem.disabled = true;
      var status = "todo";
      var scan_url = null;
      if(holding_row.children[8].textContent == "#{t(:yes)}") {
        status = "scanned";
        scan_url = holding_row.children[6].children[0].href;
      }

      // submit holding entity
      $.ajax({
        type: "POST",
        url: "#{holdings_path}",
        data: { source_name: holding_row.children[6].textContent, holding: { publication_id: pub_row.id.replace('pub',''), source_id: holding_row.children[6].children[0].href, status: status, scan_url: scan_url } },
        dataType: "script"
      }).done(function(xhr, status) {
        if(status == "success") {
          holding_row.remove();
          $(sels[0]+" ol").append(new_holding);
        } else {
          alert('error');
          elem.disabled = false;
        }
      });
    }
  };
  function load_pubs(pid) {
      var url = "#{bib_person_path({person_id: 999})}".replace("999", pid);
      $('#author_link').attr('href', url);
      $.ajax({
        url: url,
        dataType: "script"
      });
  };

  $(document).ready(function() {
    var pid = "#{@person_id}";
    if(pid != "") {
      load_pubs(pid);
      $('#person').val("#{@person_id.nil? || @person_id.empty? ? '' : @person.name}");
    }
    $('#person').bind('railsAutocomplete.select', function(event, data){
      load_pubs(data.item.id)
    });
    $('.copyme').click(function(e){
      // gather data
      var text = e.target.textContent;
      // paste into textarea
      var textArea = document.createElement("textarea");
      textArea.value = text;
      document.body.appendChild(textArea);
      // copy to clipboard
      textArea.select();
      document.execCommand("Copy");
      textArea.remove();
    });
    $(document).on('click', '.publine', function(){
      var sels = $('.publine.pub_selected');
      if(sels.size() > 0) {
        $(sels[0]).removeClass('pub_selected');
      }
      $(this).addClass('pub_selected');
    });

    $('#person').on('railsAutocomplete.select', function() { $('#person_name').val($(this).val());});
  });