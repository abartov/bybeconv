%link{ rel:'stylesheet', href:'https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.0.0-alpha14/css/tempusdominus-bootstrap-4.min.css'}
%script{ src: 'https://use.fontawesome.com/3f861a49f5.js'}

= form_tag(works_path, remote: true, method: :post, id: 'works_filters') do
  = hidden_field_tag(:sort_by, @sort)
  .by-card-content-v02.desktop-only#filters_panel
    .headline-2-v02= t(:filter_by)
    %span.reset.linkcolor.pointer= t(:reset_filter)
    = render layout: 'shared/collapsible_block', locals: { container_name: 'collfauthor', title: t(:name) } do
      .search-mobile-switch
        %button.search-mobile-option.opt_workname= t(:work_title)
        %button.search-mobile-option.opt_authorname= t(:author_name)
      %break
      %input.field-v02.field-without-label#search_input{:placeholder => t(:what_to_search_for), name: 'search_input', :type => "text", value: @search_input}/
      = autocomplete_field_tag :authorstr, @authorstr.present? ? @authorstr : '', autocomplete_person_name_path, id_element: '#author_id', 'data-noMatchesLabel' => t(:no_matches_found), style:'display:none', 'class' => 'field-v02 field-without-label author-name-field', id: 'authors', placeholder: t(:author_names)
      = hidden_field_tag :author_id, @author_id.present? ? @author_id : nil

      .multi-name-sort.pointer{style:'display:inline-block;'}
        %span.linkcolor.pointer{'data-toggle' => 'modal', 'data-target' => '#authorsDlg'}= t(:multiselect)
      = hidden_field_tag(:search_type, id: 'search_type')
      = hidden_field_tag(:authors, @authors, id: 'author_ids')
      = hidden_field_tag(:authors_names, @authors_names, id: 'authors_names')

    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :gender,
                       title: t(:author_gender),
                       field_name: :ckb_genders,
                       all_values: Person.genders.keys,
                       selected_values: @genders,
                       facet: @gender_facet }

    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :tgender,
                       title: t(:translator_gender),
                       field_name: :ckb_tgenders,
                       all_values: Person.genders.keys,
                       selected_values: @tgenders,
                       facet: @tgender_facet }

    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :copyright,
                       title: t(:copyright_status),
                       field_name: :ckb_copyright,
                       all_values: [0, 1],
                       labels: {0 => t(:public_domain), 1 => t(:by_permission) },
                       selected_values: @copyright,
                       facet: @copyright_facet,
                       icons: {0 => 'm', 1 => 'x'} }

    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :genre,
                       title: t(:genres),
                       field_name: :ckb_genres,
                       all_values: get_genres,
                       selected_values: @genres,
                       facet: @genre_facet,
                       icons: Work::GENRES.map { |g| [g, glyph_for_genre(g)] }.to_h }

    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :period,
                       title: t(:periods),
                       field_name: :ckb_periods,
                       all_values: Expression.periods.keys,
                       selected_values: @periods,
                       facet: @period_facet }

    = render layout: 'shared/collapsible_block', locals: { container_name: 'collftags', title: t(:tags) } do
      = autocomplete_field_tag :tagstr, '', autocomplete_tag_name_path, id_element: '#tag_id', 'data-noMatchesLabel' => t(:no_matches_found), 'class' => 'field-v02 field-without-label author-name-field', id: 'tags', placeholder: t(:tag)
      = hidden_field_tag :tag_ids, @tag_ids, id: 'tag_ids'

    = render layout: 'shared/collapsible_block', locals: { container_name: 'collfdate', title: t(:thedate) } do
      .search-mobile-switch
        %button.search-mobile-option.datetype#published= t(:publication)
        %button.search-mobile-option.datetype#created= t(:creation)
        %button.search-mobile-option.datetype#uploaded= t(:upload)
        = hidden_field_tag(:date_type, '', id: 'date_type')
      %break
      .dates-range
        %input.datepicker.datetimepicker-input.field-v02.field-without-label.range-date-field#fromdate{:placeholder => t(:year), name: "fromdate", 'data-toggle' => 'datetimepicker', 'data-target' => '#fromdate' }/
        .date-range-to= t(:until)
        %input.datepicker.datetimepicker-input.field-v02.field-without-label.range-date-field#todate{:placeholder => t(:year), :style => "float: left", 'data-toggle' => 'datetimepicker', name: "todate", 'data-target' => '#todate'}/

    = render partial: 'shared/filters/languages', locals: { facet: @language_facet, selected_values: @languages }

    = hidden_field_tag(:emit_filters, 'true', id: 'emit_filters')
    = hidden_field_tag(:search_after_value, '')
    = hidden_field_tag(:search_after_id, '')
    = hidden_field_tag(:page, '1')
    = hidden_field_tag(:reverse, 'false')
    = hidden_field_tag(:to_letter, '', id: 'toletter_tag')

:javascript
  $(document).ready(function() {
    $('#sort_by_dd').val("#{@sort}");
    if("#{@search_type}" == 'authorname') {
      $('.opt_authorname').addClass('active');
      $('.multi-name-sort').show();
      $('#authors').show();
      $('#search_input').hide();
      $('#search_type').val('authorname');
    } else {
      $('.multi-name-sort').hide();
      $('.opt_workname').addClass('active');
      $('#search_type').val('workname');
    }
    $('.datetype').click(function(e) {
      e.preventDefault();
      $('.datetype').removeClass('active');
      $(this).addClass('active');
      $('#date_type').val($(this).attr('id'));
    });
    $('.opt_authorname').click(function(e){
      e.preventDefault();
      $('.opt_workname').removeClass('active');
      $('.opt_authorname').addClass('active');
      $('#authors').show();
      $('#search_input').hide();
      $('.multi-name-sort').show();
    });
    $('.opt_workname').click(function(e){
      e.preventDefault();
      $('.opt_workname').addClass('active');
      $('.opt_authorname').removeClass('active');
      $('#authors').hide();
      $('#search_input').show();
      $('.multi-name-sort').hide();
    });
    var submit_timeout = null;
    $('#tags').on('railsAutocomplete.select', function(event, data){
      event.preventDefault();
      tag_id = data.item.tag_id.toString();
      $('#tag_ids').val( $('#tag_ids').val() == '' ? tag_id : $('#tag_ids').val()+','+tag_id);
      submit_filters();
    });
    $('#works_filters').on('change', function(e){
      if(e.target.id != 'tags') {
        if(window.innerWidth >= mobileWidth) {
          if(submit_timeout != null){
            window.clearTimeout(submit_timeout);
          }
          if($('.opt_workname').hasClass('active'))
            $('#search_type').val('workname');
          else
            $('#search_type').val('authorname');
          submit_timeout = window.setTimeout(submit_filters, 300);
        }
      }
    });
    $('.reset').click(function(){
      $('#works_filters').find(':input').each(function() {
        switch(this.type) {
            case 'password':
            case 'select-multiple':
            case 'select-one':
            case 'text':
            case 'textarea':
                $(this).val('');
                break;
            case 'checkbox':
            case 'radio':
                this.checked = false;
        }
      });
      $('#author_ids').val('');
      $('#tag_ids').val('');
      $('#authors_names').val('');
      $('#emit_filters').val('true');
      $('#toletter_tag').val(''); // reset pagination
      submit_filters();
    });

    if("#{@datetype}" == "") {
      $('#created').addClass('active');
      $('#date_type').val('created');
    } else {
      $("##{@datetype}").addClass('active');
      $('#date_type').val("#{@datetype}");
    }
    $('.datepicker').datetimepicker({
      viewMode: 'years',
      rtl: true,
      format: 'L',
      locale: 'he',
      format: 'YYYY',
      maxDate: '#{@maxdate}',
      useCurrent: false,
      widgetPositioning: {horizontal: 'right', vertical: 'auto'},
      icons: {
        previous: 'fa fa-chevron-right',
        next: 'fa fa-chevron-left',
      }
    }).on('hide.datetimepicker', function(e){
      window.setTimeout(submit_filters, 2000);
    });
    if("#{@fromdate}" != "") {
      $('#fromdate').val("#{@fromdate}");
    }
    if("#{@todate}" != "") {
      $('#todate').val("#{@todate}");
    }
    $('#authors').bind('railsAutocomplete.select', function(event, data){
      event.preventDefault();
      $('#search_type').val('authorname');
      submit_filters();
    });
  });
