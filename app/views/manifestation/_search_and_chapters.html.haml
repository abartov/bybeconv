.col-sm-6
  - if @m.chapters? and @m.long?
    %div{style:'position:relative'}
      = select_tag 'chapters', safe_options_for_select(@chapters, @selected_chapter), 'class' => 'chapter-name dropdown', style: 'background-color:#eeeced;margin-top: 0;width: 100%'
      %div{style:'line-height:1rem;display:inline'}
        %a.dropdown-arrow{style:'left:0'}
          %span.fa.fa-angle-down
.col-sm-6
  .search.on-card-search-field
    %span.fa.fa-search.search-icon
    %span.fa.linky{'data-search'=>'next'}!= "&darr;"
    %span.fa.linky{'data-search'=>'prev'}!="&uarr;"
    %span.fa.linky{'data-search'=>'clear'}='âœ–'
    %input#searchinwork{ style:'display:inline', type: :search, placeholder: t(:search_in_text)}
:javascript
  $(document).ready(function(){
    // the input field for the find-in-page
    var $input = $("#searchinwork"),
      // clear button
      $clearBtn = $("span[data-search='clear']"),
      // prev button
      $prevBtn = $("span[data-search='prev']"),
      // next button
      $nextBtn = $("span[data-search='next']"),
      // the context where to search
      $content = $("#actualtext"),
      // jQuery object to save <mark> elements
      $results,
      // the class that will be appended to the current
      // focused element
      currentClass = "current",
      // top offset for the jump (the search bar)
      offsetTop = #{ @readmode ? 40 : 250 },
      // the current index of the focused element
      currentIndex = 0;

    $('#chapters').change(function(){
      anchorselector = 'a[name=ch'+this.value+']'
      elem = $(anchorselector)
      if(elem != null || elem.position() == null)
      {
        position = elem.offset().top - offsetTop;
        window.scrollTo(0,position);
      }// else alert('nope');
    });

    function to_footnote(id) {
      anchorselector = 'a[name=ch'+this.value+']'
      elem = $(anchorselector)
      if(elem != null || elem.position() == null)
      {
        position = elem.offset().top - offsetTop;
        window.scrollTo(0,position);
      }
    };
    /******************************/
    /* stuff for the find-in-page */

    /**
    * Jumps to the element matching the currentIndex
    */
    function jumpTo() {
      if ($results.length) {
        var position,
          $current = $results.eq(currentIndex);
        $results.removeClass(currentClass);
        if ($current.length) {
          $current.addClass(currentClass);
          position = $current.offset().top - offsetTop;
          window.scrollTo(0, position);
        }
      }
    }

    /**
    * Searches for the entered keyword in the
    * specified context on input
    */
    $input.on("input", function() {
      var searchVal = this.value;
      $content.unmark({
        done: function() {
          $content.mark(searchVal, {
            separateWordSearch: true,
            done: function() {
              $results = $content.find("mark");
              currentIndex = 0;
              jumpTo();
            }
          });
        }
      });
    });

    /**
    * Clears the search
    */
    $clearBtn.on("click", function() {
      $content.unmark();
      $input.val("").focus();
    });

    /**
    * Next and previous search jump to
    */
    $nextBtn.add($prevBtn).on("click", function() {
      if ($results.length) {
        currentIndex += $(this).is($prevBtn) ? -1 : 1;
        if (currentIndex < 0) {
          currentIndex = $results.length - 1;
        }
        if (currentIndex > $results.length - 1) {
          currentIndex = 0;
        }
        jumpTo();
      }
    });
    /* end stuff for find-in-page */
    /******************************/
  });
