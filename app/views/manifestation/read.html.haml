-# standard display mode. "reading mode" implemented in readmode.html.haml
- if @m.sefaria_linker
  %script{ type: 'text/javascript', charset:'utf-8', src:'https://www.sefaria.org/linker.js'}

#content.container-fluid.top-element
  .row.text-page-content
    .col-12.col-lg-8
      .logo-for-print
        %img.logoBY-v02{src: "/assets/logo-byp-mobile.svg", alt:""}
      .row
        .col.work-side-menu-area
          != "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
        .col.near-side-menu
          .by-card-v02.work-info-card
            %img.about-work-card-bookmark-fold-v02{alt: t(:background), src: '/assets/creator-bookmark-back2.png'}/
            .about-work-author-card-v02
              %img.about-work-author-pic-v02{alt: @author.name, src: @author.profile_image.url(:thumb)}/
            .by-card-content-v02
              = render partial: 'metadata', locals: {tags_etc: true}
          .by-card-v02
            .work-area
              .work-content{"data-spy" => 'scroll', "data-target" => '#chapternav'}
                -# TODO: more nuanced rendering here
                - if @m.as_prose?
                  #actualtext.maintext-prose-body.search-margin
                    != raw(@html)
                - else
                  #actualtext.maintext-poetry-body.search-margin
                    != raw(@html)
              .work-side-color
                %div{'class' => "work-genre", style: "background-image: url(\"/assets/work_side_icons_#{@e.genre}.svg\"); background-repeat: no-repeat; background-size:auto;"}
    .col-12.col-lg-4
      .row
        .col
          -# Works about this work
          - if @works_about.count > 0
            = render partial: 'public_aboutnesses', locals: {edit: false, add: false}
          -# Recommendations
          .by-card-v02.left-side-card-v02#recs
            .by-card-header-left-v02
              %span.headline-1-v02= t(:recommendations_for_work)
            .by-card-content-v02.card-with-bottom-links
              - unless @m.like_count.nil? || @m.like_count == 0
                = t(:x_liked, {x: @m.like_count})
                %br
              - my_pendings = @recommendations.all_pending.where(user: current_user)
              - app_recs = @recommendations.all_approved
              - total_recs = app_recs.count + my_pendings.count
              - unless app_recs.count > 0 || my_pendings.count > 0
                = t(:no_recommendations_yet)
              - else
                = t(:this_work_has_x_recommendations, {x: total_recs})
                %br
                - apcounter = 1
                - app_recs.each do |r|
                  = render partial: 'recommendation', locals: {rec: r, pending: false, last_item: apcounter == total_recs ? true : false}
                  - apcounter += 1
                - my_pendings.each do |r|
                  = render partial: 'recommendation', locals: {rec: r, pending: true, last_item: apcounter == total_recs ? true : false}
                  - apcounter += 1
              -# add recommendation
              - unless current_user.nil?
                .card-bottom
                  .metadata-link.linkcolor.pointer.notyet#expand-add-rec
                    %span.metadata-link-icon.small-icon= '&'
                    %span{:style => "font-weight: bold"}= t(:add_recommendation)
                #add-rec-form
                  %br
                  .card{style:'background-color:#fff'}
                    .row.recommendation{style:'min-height:inherit'}
                      .rec-user
                        .rec-user-pic
                          = render partial: 'shared/user_pic', locals:{user: current_user}
                        .rec-user-name=link_to current_user.name, user_show_path(id: current_user.id)
                      = form_for(@new_recommendation, remote: true) do |f|
                        .rec-txt
                          %div{style:'display:inline;float:right;margin-top:1.3rem;width:100%'}
                            = f.text_area(:body, size: '70x4',placeholder: t(:offer_a_recommendation), id: 'new_rec_text')
                        %div
                          = hidden_field_tag :manifestation_id, @m.id
                          %input.btn{type: :submit, value: t(:submit), style:'margin-top:2.7rem;margin-left:1.5rem;background-color:#d9cdd5'}


          -# Tags
          .by-card-v02.left-side-card-v02
            .by-card-header-left-v02
              %span.headline-1-v02= t(:tags)
            .by-card-content-v02.card-with-bottom-links
              .inline-block#taggings
                = render partial: 'shared/taggings', locals: {taggings: @taggings}
              - unless current_user.nil?
                #add-tag.card-bottom
                  .metadata-link.linkcolor.pointer.notyet#expand-add-tag
                    %span.right-side-icon &amp;
                    %span{:style => "font-weight: bold"}= t(:suggest_new_tag)

                #add-tag-form
                  = form_for @tagging, remote: true do
                    %div{style: 'display:inline;margin-top:0.6rem;'}
                      = autocomplete_field_tag :tag, '', autocomplete_tag_name_path, 'data-noMatchesLabel' => t(:no_matches_found)
                      = hidden_field_tag :manifestation_id, @tagging.manifestation_id
                      = hidden_field_tag :suggested_by, @tagging.suggested_by
                    %div{style: 'display:inline'}
                      %input.btn-small-outline-v02.btn-text-v02{type: :submit, value: t(:suggest_new_tag), style: 'margin-top:0.6rem;width:auto; background-color: #d9cdd5'}

          -# Additional translations of same work
          - if @e.translation? && (@additional_translations != nil && @additional_translations != [])
            .by-card-v02.left-side-card-v02
              .by-card-header-left-v02
                %span.headline-1-v02= t(:additional_translations)
              .by-card-content-v02
                -  @additional_translations.each do |tr|
                  %div
                    %span
                      = link_to tr.title, manifestation_read(id: tr.manifestations[0].id)
                    %span= ' '+t(:translation)+': '
                    %span
                      != tr.translators.map{|t| link_to(t.name, author_toc_path(id: t.id))}.join(', ')
          -# External links
          - if @m.external_links.to_a.size > 0
            .by-card-v02.left-side-card-v02
              .by-card-header-left-v02
                %span.headline-1-v02= t(:external_links)
              .by-card-content-v02
                %ol
                - @m.external_links.each do |link|
                  %li
                    %span
                      = link_to link.description.nil? ? link.url : link.description, link.url, 'target': '_new'
            
#downloadDlg.modal{'aria-hidden' => 'true', role: 'dialog', tabindex: '-1'}
  = render partial: 'shared/download', locals: {manifestation: @m}
#recommendationDlg.modal{'aria-hidden' => 'true', role: 'dialog', tabindex: '-1'}
  %h2= t(:loading)
#citeDlg.modal{'aria-hidden' => 'true', role: 'dialog', tabindex: '-1'}
  = render partial: 'shared/cite', locals: {manifestation: @m}
-# found mistake popup
#proofDlg.modal{'aria-hidden' => 'true', role: 'dialog', tabindex: '-1'}
  = render partial: 'shared/proof', locals: {manifestation: @m}
#proofSent{style:'display:none'}
  %span{style:'color:green'}= t(:proof_thanks_html)
- if current_user
  = render partial: 'shared/anth_stuff'
- if @bookmark != 0 and @jump_to_bookmarks.nil?
  #bookmarkBehaviorDlg.modal{'aria-hidden' => 'true', role: 'dialog', tabindex: '-1'}
    = render partial: 'bookmark_behavior'
#bookmarkPanelDlg.modal{'aria-hidden' => 'true', role: 'dialog', tabindex: '-1'}
  = render partial: 'bookmark_panel'
#bookmarkDeleteDlg.modal{'aria-hidden' => 'true', role: 'dialog', tabindex: '-1'}
  = render partial: 'bookmark_delete'
-# chapter popup
- if @m.chapters?
  .modal#chapterDlg{role: 'dialog', tabindex: '-1'}
    .modal-dialog.modal-dialog-centered{role: 'document'}
      .modal-content
        .popup-top
          %button.btn-small-outline-v02{'data-dismiss' => 'modal'}
            .btn-text-v02
              %span.right-arrow 2
              %span= t(:back)
          .headline-2-v02{:style => "text-align: center;margin: 0; padding-top: 3px;"}= t(:jump_to)
        .by-popup-v02
          %div
            .by-card-content-v02.dropdown-content-mobile{:style => "padding-top: 0"}
              - @chapters.each do |ch|
                %a.jumpch{style:'text-overflow: ellipsis;overflow-x: hidden;', 'data-target' => "ch#{ch[1]}", href:"#ch#{ch[1]}"}= ch[0]
              - unless @curated_content.nil?
                .dropdown-menu-seperator
                .curatorial-content
                  %a{href:'#curated'}
                    %span.by-icon-v02 Q
                    = t(:curated_content)
          .popup-bottom-filler

:javascript
  $(document).ready(function() {
    $('#content').css('margin-top', $('header').position().top + $('header').outerHeight(true) + 10);
    $('#jump-to-recs').click(function(){
      elem = $('#recs');
      if(elem != null && elem.position() != null)
      {
        offsetTop = $('header').position().top + $('header').outerHeight(true) + 10;
        position = elem.offset().top - offsetTop;
        window.scrollTo(0,position);
      }
    });
    $('#expand-add-tag').click(function() {
      /*
      $('#expand-add-tag').css('display','none');
      $('#add-tag-form').css('display','block');
      */
    });
    $('#expand-add-rec').click(function() {
      /*
      $('#expand-add-rec').css('display','none');
      $('#add-rec-form').css('display','block');
      */
    });
    $('.jumpch').click(function(e) {
      e.preventDefault();
      anchor = $(this).attr('data-target');
      $('html, body').animate({
        scrollTop: $('a[name='+anchor+']').offset().top - $('header').height() - 45
      }, 800);
      $('#chapterDlg').modal('hide');
      $('header').addClass("scrolled");
      $('html, body').animate({ // re-adjust, after the header height changed
        scrollTop: $('a[name='+anchor+']').offset().top - $('header').height() - 45
      }, 0);
      $('#actualtext').focus();
    });
    $('.reversefootnote').click(function(e) {
      e.preventDefault();
      anchor = $(this).attr('href');
      $('html, body').animate({
        scrollTop: $('a[id="'+anchor.slice(1)+'"]').offset().top - $('header').height() - 45
      }, 800);
    });
    $('#downloadDlg').on('shown.bs.modal', function () {
      $('.download_submitter').removeAttr('disabled');
    });
    $('.anthologies_button:not(:has(.must_login))').click(function() {
      $('#anthologiesDlg').modal({  backdrop: 'static',
        keyboard: false, show: true});
    });
    $('.citebutton').click(function() {
      $('#text-menu-more').css('display', 'none');
      $('#citeDlg').modal('show');
    });
    $('.download').click(function() {
      $('#text-menu-more').css('display', 'none');
      $('#downloadDlg').modal('show');
    });
    $('.rec_popup_button').click(function(){
      $('#recommendationDlg').load($(this).attr('data-recpath'));
      $('#recommendationDlg').modal('show');
    });
    if("#{@m.sefaria_linker}" != '') {
      sefaria.link({selector: '#actualtext', contentLang: 'hebrew', interfaceLang: 'hebrew'});
    }
  });