= form_tag(works_path, remote: true, method: :post, id: 'mobile_filters') do
  = hidden_field_tag(:sort_by, @sort)
  = hidden_field_tag(:author_id, @author_id.present? ? @author_id : nil)
  = hidden_field_tag(:search_type, '' ,id: 'search_type')
  = hidden_field_tag(:authors, @authors, id: 'author_ids')
  = hidden_field_tag(:authors_names, @authors_names, id: 'authors_names')
  = hidden_field_tag(:date_type, '', id: 'date_type')
  = hidden_field_tag(:emit_filters, sortonly ? 'false' : 'true', id: 'emit_filters')
  = hidden_field_tag(:cur_page, @page, id: 'cur_page_tag')
  = hidden_field_tag(:page, '', id: 'mobile_page_tag')
  = hidden_field_tag(:to_letter, '', id: 'toletter_tag')
  #texts-list-filter_M.flex-popup.filter-sort-m-popup
    .popup-top
      %button.btn-small-outline-v02{'data-dismiss'=>'modal'}
        .btn-text-v02
          %span.right-arrow 2
          %span= t(:back)
      .headline-2-v02{style: "text-align: center;margin: 0; padding-top: 3px;"} סינון ומיון
      - unless sortonly
        %button.reset.btn-small-outline-v02
          .btn-text-v02= t(:reset_filter)
    .by-popup-v02
      .by-card-content-v02.limited-height-popup-content-v02
        .author-mobile-sort-and-filter
          - unless sortonly
            .search-mobile-switch
              %button.search-mobile-option#opt_filter= t(:filter)
              %button.search-mobile-option#opt_sort= t(:sort)
            .by-horizontal-seperator-light
          .mobile-sort-area{style:'display: none'}
            %div{style: "margin-top: 15px"}
              .headline-2-v02= t(:sort_by)
              #sort-by
                .sort-by-mobile
                  %p
                    = radio_button_tag(:sort_by, 'alphabetical_asc', @sort == 'alphabetical_asc' ? true: nil)
                    %label= t(:alefbet_asc)
                    %br
                    = radio_button_tag(:sort_by, 'alphabetical_desc', @sort == 'alphabetical_desc' ? true: nil)
                    %label= t(:alefbet_desc)
                    %br
                    = radio_button_tag(:sort_by, 'popularity_desc', @sort == 'popularity_desc' ? true: nil)
                    %label= t(:popularity_desc)
                    %br
                    = radio_button_tag(:sort_by, 'popularity_asc', @sort == 'popularity_asc' ? true: nil)
                    %label= t(:popularity_asc)
                    %br
                    %b
                      %label= t(:dates)
                    %br
                    = radio_button_tag(:sort_by, 'publication_date_asc', @sort == 'publication_date_asc' ? true: nil)
                    %label= t(:pubdate_asc)
                    %br
                    = radio_button_tag(:sort_by, 'publication_date_desc', @sort == 'publication_date_desc' ? true: nil)
                    %label= t(:pubdate_desc)
                    %br
                    = radio_button_tag(:sort_by, 'creation_date_asc', @sort == 'creation_date_asc' ? true: nil)
                    %label= t(:workdate_asc)
                    %br
                    = radio_button_tag(:sort_by, 'creation_date_desc', @sort == 'creation_date_desc' ? true: nil)
                    %label= t(:workdate_desc)
                    %br
                    = radio_button_tag(:sort_by, 'upload_date_asc', @sort == 'upload_date_asc' ? true: nil)
                    %label= t(:uploaddate_asc)
                    %br
                    = radio_button_tag(:sort_by, 'upload_date_desc', @sort == 'upload_date_desc' ? true: nil)
                    %label= t(:uploaddate_desc)
                    %br
          - unless sortonly
            .author-mobile-filters-area{style:'display: none'}
              .headline-2-v02= t(:filter_by)
              .sort-type
                .vertical-expand.collapsed{'data-target' =>'.collfauthor', 'data-toggle' =>'collapse'}
                  .sort-type-headline= t(:name)
                .collapse.collfauthor
                  .nested-content
                    .search-mobile-switch
                      %button.search-mobile-option.opt_workname= t(:work_title)
                      %button.search-mobile-option.opt_authorname= t(:author_name)
                    %break
                    %input.field-v02.field-without-label.author-name-field#search_input{:placeholder => t(:what_to_search_for), name: 'search_input', :type => "text", value: @search_input}
                    = autocomplete_field_tag :authorstr, @authorstr.present? ? @authorstr : '', autocomplete_person_name_path, id_element: '#author_id', 'data-noMatchesLabel' => t(:no_matches_found), style:'display:none', 'class' => 'field-v02 field-without-label author-name-field', id: 'authors', placeholder: t(:author_names)
                    = hidden_field_tag :author_id, @author_id.present? ? @author_id : nil
          
                    .multi-name-sort.pointer
                      %span.linkcolor{'data-toggle' => 'modal', 'data-target' => '#authorsDlg'}= t(:multiselect)
              .sort-type
                .vertical-expand.collapsed{'data-target' =>'.collfgender', 'data-toggle' =>'collapse'}
                  .sort-type-headline= t(:author_or_translator_gender)
                .collapse.collfgender
                  .nested-content.nested-list
                    - Person.genders.invert.each do |p|
                      - attrs = @gender_facet[p[0]].nil? ? {disabled: 'disabled'} : {}
                      - attrs.merge!({:name => "ckb_genders[]", :type => "checkbox", id: "gender_#{p[1]}", value: p[1]})
                      - attrs.merge!({checked: 'checked'}) if @genders.present? && @genders.include?(p[1])
                      %input{ attrs}/
                      %label
                        = t(p[1])
                        %span= "(#{@gender_facet[p[0]] || '0'})"
                      %br/
              .sort-type
                .vertical-expand.collapsed{'data-target' =>'.collfcopyright', 'data-toggle' =>'collapse'}
                  .sort-type-headline= t(:copyright_status)
                .collapse.collfcopyright
                  .nested-content.nested-list
                    - attrs = {name: "ckb_copyright[]", :type => "checkbox", id: 'copyright_0', value: 0}
                    - attrs.merge!({disabled: 'disabled'}) if @copyright_facet[0].nil?
                    - attrs.merge!({checked: 'checked'}) if @copyright.present? && @copyright.include?(0)

                    %input{attrs}/
                    %label
                      %span.by-icon-v02> m
                      = t(:public_domain)
                      %span= "(#{@copyright_facet[0] || '0'})"
                    %br/
                    - attrs = {name: "ckb_copyright[]", :type => "checkbox", id: 'copyright_1', value: 1}
                    - attrs.merge!({disabled: 'disabled'}) if @copyright_facet[1].nil?
                    - attrs.merge!({checked: 'checked'}) if @copyright.present? && @copyright.include?(1)
                    %input{attrs}/
                    %label
                      %span.by-icon-v02> x
                      = t(:by_permission)
                      %span= "(#{@copyright_facet[1] || '0'})"
                    %br/
              .sort-type
                .vertical-expand.collapsed{'data-target' =>'.collfgenre', 'data-toggle' =>'collapse'}
                  .sort-type-headline= t(:genres)
                .collapse.collfgenre
                  .nested-content.nested-list
                    - get_genres.each do |g|
                      - attrs = @genre_facet[g].nil? ? {disabled: 'disabled'} : {}
                      - attrs.merge!({:name => "ckb_genres[]", :type => "checkbox", id: "genre_#{g}", value: g})
                      - attrs.merge!({checked: 'checked'}) if @genres.present? && @genres.include?(g)
                      %input{ attrs}/
                      %label
                        %span.by-icon-v02>= glyph_for_genre(g)
                        = textify_genre(g)
                        %span= "(#{@genre_facet[g] || '0'})"
                      %br/
              .sort-type
                .vertical-expand.collapsed{'data-target' =>'.collfperiod', 'data-toggle' =>'collapse'}
                  .sort-type-headline= t(:periods)
                .collapse.collfperiod
                  .nested-content.nested-list
                    - Expression.periods.invert.each do |p|
                      - attrs = @period_facet[p[0]].nil? ? {disabled: 'disabled'} : {}
                      - attrs.merge!({:name => "ckb_periods[]", :type => "checkbox", id: "period_#{p[1]}", value: p[1]})
                      - attrs.merge!({checked: 'checked'}) if @periods.present? && @periods.include?(p[1])
                      %input{ attrs}/
                      %label
                        = t(p[1])
                        %span= "(#{@period_facet[p[0]] || '0'})"
                      %br/
              .sort-type
                .vertical-expand.collapsed{'data-target' =>'.collfdate', 'data-toggle' =>'collapse'}
                  .sort-type-headline= t(:thedate)
                .collapse.collfdate
                  .nested-content
                    .search-mobile-switch
                      %button.search-mobile-option.datetype#published= t(:publication)
                      %button.search-mobile-option.datetype#created= t(:creation)
                      %button.search-mobile-option.datetype#uploaded= t(:upload)
                    %break
                    .dates-range
                      / #histogramSlider
                      /.dates-graph-area
                      /.range-outside
                      /  .range-inside
                      /    .range-handle-right
                      /    .range-handle-left
                      %input.datepicker.datetimepicker-input.field-v02.field-without-label.range-date-field#fromdate{:placeholder => t(:year), name: "fromdate", 'data-toggle' => 'datetimepicker', 'data-target' => '#fromdate' }/
                      .date-range-to= t(:until)
                      %input.datepicker.datetimepicker-input.field-v02.field-without-label.range-date-field#todate{:placeholder => t(:year), :style => "float: left", 'data-toggle' => 'datetimepicker', name: "todate", 'data-target' => '#todate'}/
              .sort-type
                .vertical-expand.collapsed{'data-target' =>'.collflang', 'data-toggle' =>'collapse'}
                  .sort-type-headline= t(:orig_lang)
                .collapse.collflang
                  .nested-content{style: "padding-right: 0"}
                    %ul
                      %li
                        - attrs = {name: "ckb_languages[]", :type => "checkbox", id: 'lang_he', value: 'he'}
                        - attrs.merge!({disabled: 'disabled'}) if @language_facet['he'].nil? || @language_facet['he'] == 0
                        - attrs.merge!({checked: 'checked'}) if @languages.present? && @languages.include?('he')
                        %input{attrs}/
                        %label
                          = t(:hebrew)
                          %span= "(#{@language_facet['he'] || '0'})"
                      %li
                        - attrs = {name: "ckb_languages[]", :type => "checkbox", id: 'lang_xlat', class: 'lang_xlat', value: 'xlat'}
                        - attrs.merge!({disabled: 'disabled'}) if @language_facet[:xlat].nil? || @language_facet[:xlat] == 0
                        - attrs.merge!({checked: 'checked'}) if @all_xlat || (@languages.present? && @languages.include?('xlat'))
                        %input{attrs}/
                        %label
                          = t(:translations)
                          %span= "(#{@language_facet[:xlat] || '0'})"
                        .languages-filters
                          %ul.nested-list.xlat_langs
                            - @language_facet.sort{|a,b| b[1] <=> a[1]}.each do |lang, amount|
                              - next if lang == :xlat || lang == 'he'
                              %li
                                - attrs = {name: "ckb_languages[]", :type => "checkbox", id: "lang_#{lang}", value: lang}
                                - attrs.merge!({disabled: 'disabled'}) if @language_facet[lang].nil? || @language_facet[lang] == 0
                                - attrs.merge!({checked: 'checked'}) if @languages.present? && @languages.include?(lang)
                                %input{attrs}
                                %label
                                  = textify_lang(lang)
                                  %span= "(#{amount || '0'})"
      .bottom-button-area
        %button.by-button-v02#apply_mobile_filters= t(:apply_mobile_filters)
:javascript
  $(document).ready(function() {
    if("#{@sort_or_filter}" == 'sort') {
      $('.mobile-sort-area').show();
      $('.author-mobile-filters-area').hide();
      $('#opt_sort').addClass('active');
      $('#opt_filter').removeClass('active');
    } else {
      $('.mobile-sort-area').hide();
      $('.author-mobile-filters-area').show();
      $('#opt_filter').addClass('active');
      $('#opt_sort').removeClass('active');
    }
    $('#opt_filter').click(function(e){
      e.preventDefault();
      $('.mobile-sort-area').hide();
      $('.author-mobile-filters-area').show();
      $('#opt_filter').addClass('active');
      $('#opt_sort').removeClass('active');
    });
    $('#opt_sort').click(function(e){
      e.preventDefault();
      $('.mobile-sort-area').show();
      $('.author-mobile-filters-area').hide();
      $('#opt_sort').addClass('active');
      $('#opt_filter').removeClass('active');
    });
    $('#apply_mobile_filters').click(function(e){
      e.preventDefault();
      $('#mobileFilterDlg').modal('hide');
      submit_filters();
    });
    $('.lang_xlat').change(function(){
      // set all translated languages on/off accordingly
      var checked = $(this).is(":checked");
      $('.xlat_langs input').each(function(li){
        $(this).prop('checked', checked);
      });
    });
    var mshould_check_xlat = $('.xlat_langs input').length > 0;
    var m_any_checked = false;
    $('.xlat_langs input').each(function(li){
      if($(this).prop('checked') == false) {
        if(!$(this).parent().text().match(/\(0\)/)) {
          mshould_check_xlat = false;
        }
      } else {
        m_any_checked = true;
      }
    });
    if(mshould_check_xlat && m_any_checked) {
      $('.lang_xlat').prop('checked', true);
    }

  });