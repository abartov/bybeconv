%div{style: 'margin: 5px'}
  %h2= t(:converted_output, {fname: @text.path.sub(AppConstants.base_dir,'')})
  / - unless @text.paras_condensed
  /   %button#bPoetry= t(:treat_as_poetry)
  %button#bPoetry= t(:treat_as_poetry)
  %a{href: '#actions'}= t(:to_actions)
  = form_tag(action: 'render_html', id: @text.id) do
    %ul
      %li= link_to t(:chop_and_update_title), action: :chop_title, id: @text.id
      - [1, 2, 3].each do |i|
        %li= link_to t(:chopN_html, {n: i}), action: "chop#{i}", id: @text.id
    - unless @text.person.nil?
      %h2= t(:author)+': '+@text.person.name
      - unless @text.translator.nil?
        %h3= t(:translator)+': '+@text.translator.name
    .markdown_container
      %div{ style:"vertical-align:top; width: 30%;display:flex;flex-direction:column;height:100%;box-sizing:border-box;float:left;padding-right:7px;"}
        #legacy_markdown_link
          %h2= t(:markdown)
          = t(:raw_markdown_html, {orig_html: AppConstants.base_uri+ @text.url})
        .markdown
          = text_area_tag(:markdown, raw(@markdown), class: 'textarea100')
      %div{ style:"vertical-align:top; width: 70%; padding-left:10px;background:#d2cfcf;"}
        %h2= t(:display_text)
        != raw(@html)
    = label_tag(:genre, t(:genre))
    = select_tag(:genre, options_for_select(get_genres.map {|genre| [I18n.t(genre), genre]}, @text.genre), {include_blank: true})
    %br
    %br
    - if @text.person.nil?
      = label_tag t(:legacy_guessed_person)
      - if @text.html_dir.person.nil?
        %span{style: 'color:red'}= link_to t(:dir_not_associated), url_for(controller: :html_dirs, action: :edit, id: @text.html_dir.id)
      - else
        %span{style: 'color:green'}= link_to @text.html_dir.person.name, authors_show_path(id: @text.html_dir.person.id)
        = link_to t(:confirm), html_file_confirm_html_dir_person_path(@text), {remote: true, :class => "ajax_link", "data-done-msg" => t(:confirmed), "data-doing-msg" => t(:confirming)}
        %br
        %b= t(:or)
    - else
      = label_tag t(:associated_persons)
      %br
      = link_to @text.person.name+' ('+t(:author)+')', authors_show_path(id: @text.person.id)
      - unless @text.translator.nil?
        %br
        = link_to @text.translator.name+' ('+t(:translator)+')', authors_show_path(id: @text.translator.id)
      %br
      - if @text.metadata_ready?
        %b
          %span{style: 'color:green'}= t(:frbr_ready)
    %br
    = t(:add)
    = select_tag :add_person, options_from_collection_for_select(Person.order(:name), 'id','name'), include_blank: true
    = t(:in_role)
    = select_tag :role, options_for_select([[t(:author), HtmlFile::ROLE_AUTHOR], [t(:translator), HtmlFile::ROLE_TRANSLATOR]])
    %br
    = link_to t(:to_manage_people), authors_list_path #url_for(controller: :authors, action: :list)
    %br
    %h3= t(:comments)
    = text_area_tag(:comments, @text.comments)
    %br
    = label_tag t(:remove_line_nums)
    = check_box_tag :remove_line_nums
    %br
    %b
      = submit_tag t(:save_and_update_display)
  %a{name: 'actions'}
  %h3= t(:actions)
  %ul
    / - [1, 2].each do |i|
    /   %li= link_to t(:choplastN_html, {n: i}), action: "choplast#{i}", id: @text.id
    %li= link_to t(:mark_as_manual), action: :mark_manual, id: @text.id
    %li
      %b
        - if @text.genre.nil? or @text.genre.empty?
          = t(:must_set_genre)
        - elsif @text.status == 'Accepted'
          != link_to t(:publish), action: :publish, id: @text.id
        - elsif @text.status != 'Published'
          != raw(t(:accept_conversion_and) + link_to(t(:frbrize), html_file_frbrize_path(@text)))
%p= link_to t(:back_to_dashboard), :action => :list

:javascript
  var font_size = 12
  jQuery(document).ready(function() {
    var newsize = $('.markdown_container').height() - $('#legacy_markdown_link').height(); // this is horrible, but I've given up on getting the textarea to auto-fill the container height. :((
    $('.markdown').css('height', newsize);
    $('.textarea100').css('height', newsize);
    //jQuery(".markdown").hide();
    jQuery(".heading").click(function()
    {
      jQuery(this).next(".markdown").slideToggle(500);
    });
  $('#bPoetry').click(function() { document.location.href="#{url_for(:controller => :html_file, :action => :poetry, :id => @text.id)}"; return false;});
  });

  $(document).ready(function() {
    $('.ajax_link')
      .bind("ajax:beforeSend", function(evt, xhr, settings) {
        var $link = $(this);
        $link.html( "<b>"+$(this).data('doing-msg')+"</b>");
      })
      .bind("ajax:success", function(evt, data, status, xhr){
        $(this).html($(this).data('done-msg'));
    });
    $('.author_matches_link')
      .bind("ajax:beforeSend", function(evt, xhr, settings) {
        var $link = $(this);
        $link.html( "<b>"+$(this).data('doing-msg')+"</b>");
      })
      .bind("ajax:success", function(evt, data, status, xhr){
        $(this).html($(this).data('done-msg'));
    });
  });
