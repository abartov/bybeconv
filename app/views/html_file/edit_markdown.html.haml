!= "<script src=\"https://unpkg.com/stackedit-js@1.0.5/docs/lib/stackedit.min.js\"></script>"
.backend
  = form_tag(action: 'edit_markdown', id: @text.id) do
    .container-fluid
      .row
        .col-md-12
          %span.btn#vised{style: 'float:none;font-size:150%;height:auto'}= t(:launch_visual_editor)
      .row
        .col-md-6
          - if @text.has_splits
            %h2{style:'color:green'}= "** #{t(:split_work_mode)} **"
            %p!= t(:split_work_mode_intro)
          - else
            %h2= @text.title
          %div{style:'background-color: yellow'}
            %h4{'data-target' =>'#pub_details', 'data-toggle' =>'collapse', style:'cursor:pointer'}= t(:for_publishers_project)
            .collapse#pub_details
              = label_tag(t(:publisher_link))
              = text_field_tag(:pub_link, @text.pub_link, size: 100)
              %br
              = label_tag(t(:publisher_link_text))
              = text_field_tag(:pub_link_text,@text.pub_link_text, size: 70)
        .col-md-6
          - unless @text.author.nil?
            %h3
              = t(:by)+' '
              = link_to "#{@text.author.name} (#{t(:author)})", authority_path(id: @text.author)
              - unless @text.translator.nil?
                = t(:translated_by)+' '
                = link_to "#{@text.translator.name} (#{t(:translator)})", authors_show_path(id: @text.translator.id)
            = t(:publisher)+": #{@text.publisher}; #{t(:year_published)}: #{@text.year_published}"
          %b= label_tag t(:orig_lang)
          = select_tag 'orig_lang', options_for_select(get_langs.map {|lang| [textify_lang(lang), lang]}, @text.orig_lang)
          %b= label_tag(:genre, t(:genre))
          = select_tag(:genre, options_for_select(get_genres.map {|genre| [I18n.t(genre), genre]}, @text.genre), {include_blank: true})
      .row
        .col-md-12
          .markdown_container.row
            .col-sm-3
              #legacy_markdown_link
              %h2= t(:markdown)
              %button.btn-small-outline-v02#add_stanza_break{style:'display:unset'}
                %b.btn-text-v02= t(:add_stanza_break)
              %button.btn-small-outline-v02#add_angled_brackets{style:'display:unset'}
                %b.btn-text-v02= t(:add_angled_brackets)
              %button.btn-small-outline-v02#remove_angled_brackets{style:'display:unset'}
                %b.btn-text-v02= t(:remove_angled_brackets)
              %button.btn-small-outline-v02#minuses_to_makafim{style:'display:unset'}
                %b.btn-text-v02= t(:minuses_to_makafim)
              %button.btn-small-outline-v02#tidy_footnote_dirs{style:'display:unset'}
                %b.btn-text-v02= t(:tidy_footnote_dirs)
              .markdown= text_area_tag(:markdown, raw(@markdown), class: 'textarea100')
            .col-sm-9
              %h2= t(:display_text)
              #preview{ style:"padding-left:10px;padding-right:15px;background:#d2cfcf; overflow-y:auto"}
                != raw(@html)
                %br
      .row
        .col-md-12
          %h3= t(:comments)
          = text_area_tag(:comments, @text.comments)
          %br
          %b
            = submit_tag t(:preview)
            = ' | '
            = submit_tag t(:save_and_update_display)

          %h3= t(:actions)
          %ul
            %li
              %b
          - if @text.genre.nil? or @text.genre.empty?
            = t(:must_set_genre)
          - elsif @text.status != 'Published'
            = t(:status)
            = select_tag :pub_status, options_for_select(Manifestation.statuses.map {|lt| [t(lt[0]), lt[1]]}), {include_blank: true}
            = t(:pub_status_explanation)
            %p
            %h3.by-button-v02.surprise-btn-v02.headline-2-v02#frbrize_button{style:'float:unset;width:max-content;padding-top:10px;'}!= t(:accept_conversion_and) + t(:frbrize)

= render partial: 'shared/markdown_utils'
:javascript
  var somethingChanged=false;
  function highlight_in_red(buf) {
    return "<span style=\"color:red; font-size: 250%\">"+buf+"</span>";
  }
  jQuery(document).ready(function() {
    if("#{@disable_submit}" == 'true') {
      $('#frbrize_button').css('background-color','gray');
      $('#frbrize_button').css('cursor','not-allowed');
    }
    $('form').submit(function() {
      $(window).unbind('beforeunload');
    });

    $('#markdown').change(function() { 
      somethingChanged = true; 
    });
    $(window).bind('beforeunload', function(e){
      if(somethingChanged)
        return true;
      else 
        e=null;
    });
    function submit_frbr() {
      url = "#{url_for(controller: :html_file, action: :frbrize, id: @text.id)}"
      if($('#pub_status').val() != '')
        url += '?pub_status=' + $('#pub_status').val();
      location.href = url;
    }
    
    if("#{@disable_submit}" != 'true') {
      $('#frbrize_button').click(function(e){
        if(somethingChanged) {
          alert("בוצעו שינויים בטקסט והם יאבדו בלי שמירה! האם באמת לעזוב את הדף [במסך הבא]?");
        }
      });
      var warned_about_splits = false;
      $('#frbrize_button').click(function(e){
        e.preventDefault();
        if(#{@text.has_splits ? true : false}) {
          if((/&&& /.test($('#markdown').val( ))) && (/^\s*\S+\s*&&& /.test($('#markdown').val()))) {
              alert("#{t(:non_whitespace_before_first_part)}");
          } else if(!warned_about_splits){
            alert("#{t(:careful_with_splits)}");
            warned_about_splits = true;
          } else {
            submit_frbr();
          }
        } else {
          submit_frbr();
        }
      });
    }
    $('#vised').click(function() {
      const el = document.querySelector('#markdown');
      const pv = document.querySelector('#preview');
      const stackedit = new Stackedit({
          url: 'https://stackedit.benyehuda.org/app'
      });
      // Open the iframe
      stackedit.openFile({
        name: 'מארקדאון', // with an optional filename
        content: {
          text: el.value // and the Markdown content.
        }
      });
      // Listen to StackEdit events and apply the changes to the textarea.
      stackedit.on('fileChange', (file) => {
        el.value = file.content.text;
        pv.innerHTML = file.content.html;
      });
    });
  });
