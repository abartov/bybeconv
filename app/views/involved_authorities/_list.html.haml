- if item.involved_authorities.any?
  %h3= t(:associated_persons)
  - list_id = "involved_authorities_#{item.class.name}_#{item.id}"
  %ul{ id: list_id }
    = render partial: 'involved_authorities/list_items', locals: { item: item, edit: edit }
  - if edit
    :ruby
      prefix = "new_involved_authority_#{item.class.name}_#{item.id}"
      roles = case item.class.name
      when 'Work' then InvolvedAuthority::WORK_ROLES
      when 'Expression' then InvolvedAuthority::EXPRESSION_ROLES
      else InvolvedAuthority.roles.keys
      end
    %br
    = t(:add)
    = autocomplete_field_tag "#{prefix}_autocomplete", '', autocomplete_authority_name_path,
                            id_element: "##{prefix}_authority_id"
    = hidden_field_tag "#{prefix}_authority_id"
    = t(:in_role)
    = select_tag "#{prefix}_role",
                options_for_select(roles.map { |role| [textify_authority_role(role), role] })
    = button_tag t(:add), id: "#{prefix}_add_button", type: :button
    %br
    :javascript
      $(function() {
        $('##{prefix}_add_button').click(function(e) {
          const role = $('##{prefix}_role').val();
          const authority_id = $('##{prefix}_authority_id').val();

          if (authority_id == '') {
            alert('#{t('.select_authority')}');
            return false;
          }

          $.post(
            '#{involved_authorities_path}',
            {
              item_type: '#{item.class.name}',
              item_id: #{item.id},
              involved_authority: {
                role: role,
                authority_id: authority_id
              }
            }
          ).always(function() {
              $('##{prefix}_autocomplete').val('');
              $('##{prefix}_authority_id').val('');
              $('##{list_id}').load('#{involved_authorities_path(item_type: item.class.name, item_id: item.id)}');
          });
        });
      });
