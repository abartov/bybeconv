%script{src: 'https://cdnjs.cloudflare.com/ajax/libs/mark.js/8.11.1/jquery.mark.min.js'}
.backend
  %br
  %br
  %br
  %h2
    = t(:proof_for)
    - if @proof.item.is_a?(Manifestation)
      :ruby
        m = @proof.item
        austr = authors_linked_string(m)
        austr += " / #{translators_linked_string(m)}" if m.expression.translation
      = link_to m.title, manifestation_path(m), target: '_blank', rel: 'noopener'
      = ' / '
      != austr
      %br
    - elsif @proof.item.is_a?(Collection)
      - c = @proof.item
      = link_to c.title, collection_path(c), target: '_blank', rel: 'noopener'
    - else
      = t(:legacy_text_from_url) + ': ' + @proof.try(:about)
  %p
    %b= t(:status) + ':'
    = textify_proof_status(@proof.status)
  %p
    %b= link_to t(:proof_show_text), @proof.about, target: '_blank', rel: 'noopener'
  %p
    %b
      #{t(:from)} #{@proof.from}
  %p
    #{t(:submitted_at)} #{@proof.created_at}
  - unless @proof.highlight.nil?
    %h3= t(:highlighted_passage)
    %br
    .graybox#highlight{ style: 'font-size: 14pt; border:1px;background-color:#dedede' }
      != sanitize(@proof.highlight.gsub("\n", '<br/>'))
  %br
  %h3= t(:proof_heading)+':'
  %br
  .graybox{ style: 'font-size: 14pt; border:1px;background-color:#dedede' }
    != sanitize(@proof.what.gsub("\n", '<br/>'))
  %hr
  %p= t(:resolve_no_email_explanation)
  %br
  %p{ style: 'margin-bottom:16px;font-size:16pt' }
    %b= link_to t(:resolve_as_fixed), resolve_proof_path(@proof, fixed: 'yes', email: 'yes'), method: :post
  %p{ style: 'margin-bottom:16px;font-size:16pt' }
    %b= link_to t(:resolve_as_fixed_no_email),
                resolve_proof_path(@proof, fixed: 'yes', email: 'no'),
                method: :post
  = form_tag resolve_proof_path(@proof.id), id: 'fixed_explain_form' do
    %p#fixed_but_explain{style:'margin-bottom:16px;font-size:16pt'}
      %b.pointer.linkcolor= t(:resolve_as_fixed_with_explanation)
    = hidden_field_tag :email, 'yes'
    = hidden_field_tag :fixed, 'yes'
    = hidden_field_tag :escalate, 'no'
    = text_area_tag 'fixed_explanation', '',{rows: 4, columns: 50}

  %hr
  %p{ style: 'margin-bottom:16px;font-size:16pt' }
    %b= link_to t(:resolve_as_wontfix),
                resolve_proof_path(@proof, fixed: 'no', email: 'yes', escalate: 'no'),
                method: :post
  %p{style:'margin-bottom:16px;font-size:16pt'}
    %b= link_to t(:resolve_as_wontfix_no_email),
                resolve_proof_path(@proof, fixed: 'no', email: 'no', escalate: 'no'),
                method: :post
  = form_tag resolve_proof_path(@proof.id), id: 'wontfix_explain_form' do
    %p#wontfix_but_explain{style:'margin-bottom:16px;font-size:16pt'}
      %b.pointer.linkcolor= t(:resolve_as_wontfix_with_explanation)
    = hidden_field_tag :email, 'yes'
    = hidden_field_tag :fixed, 'no'
    = hidden_field_tag :escalate, 'no'
    = text_area_tag 'wontfix_explanation', '', { rows: 4, columns: 50 }
  %hr
  %p{style:'margin-bottom:16px;font-size:16pt'}
    %b= link_to t(:resolve_as_escalate), resolve_proof_path(@proof, fixed: 'no', escalate: 'yes'), method: :post
  %p{style:'margin-bottom:16px;font-size:16pt'}
    %b= link_to t(:resolve_as_spam), resolve_proof_path(@proof, fixed: 'spam'), method: :post
  %hr
  - if @proof.item.is_a?(Manifestation)
    .read_html
      .row
        - btn_style = 'float:right; font-size:16pt; height:auto; width:auto;'
        .col-3
          .btn.btn-small-outline-v02.btn-text-v02.reading-mode-btn-v02{ style: btn_style }
            = link_to t(:edit_markdown), manifestation_edit_path(@proof.item), { style: 'color:white' }
        .col-3
          .btn.btn-small-outline-v02.btn-text-v02.reading-mode-btn-v02{ style: btn_style }
            = link_to t(:edit_markdown_in_new_window),
                      manifestation_edit_path(@proof.item),
                      { target: '_blank', style: 'color:white', rel: 'noopener' }
        - unless @proof.highlight.nil?
          .col-3
            .btn.btn-small-outline-v02.btn-text-v02.reading-mode-btn-v02.pointer#find_in_text{ style: btn_style }
              = t(:find_in_text)
      %hr
      != raw(MarkdownToHtml.call(@proof.item.markdown))

:javascript
  $(document).ready(function() {
    $('#fixed_but_explain').click(function(){
      $('#fixed_explain_form').submit();
    });
    $('#wontfix_but_explain').click(function(){
      $('#wontfix_explain_form').submit();
    });
    $('#find_in_text').click(function(){
      $("div.read_html").mark($('#highlight').text().trim(), {
          "element": "span",
          "separateWordSearch": false,
          "className": "highlight",
          "done": function() {
            position = $('.highlight');
            if(position != null && position.first() != null) {
              sp = position.first().offset().top;
              window.scrollTo(0, sp - 150);
            }
          }
      });
    });
  });
