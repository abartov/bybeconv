%li{ style: toc_node.is_a?(Manifestation) ? '' : 'margin-top: 15px; margin-bottom: 10px;'}
  - if toc_node.is_a?(Manifestation)
    - genre = toc_node.expression.work.genre
    %span.by-icon-v02{ title: t(genre) }>= glyph_for_genre(genre)
    &nbsp;
    :ruby
      label = toc_node.title
      case role
      when :editor
        label += " / #{toc_node.author_string}"
      when :translator
        label += " / #{authorities_string(toc_node, :author)}"
        if toc_node.translators.size > 1
          label += " / #{authorities_string(toc_node, :translator, exclude_authority_id: authority_id)}"
        end
      when :author
        if toc_node.authors.size > 1
          label += " / #{authorities_string(toc_node, :author, exclude_authority_id: authority_id)}"
        end
      end

    - if toc_node.published?
      = link_to label, manifestation_path(toc_node)
    - else
      = label
  - else
    -# Collection node
    - collection = toc_node.item
    - type_prefix = collection.collection_type == 'uncollected' ? '' : textify_collection_type(collection.collection_type)
    %span{style:'font-size:120%;'}
      = link_to collection.title, collection_path(collection)
      - if type_prefix.present?
        = " (#{type_prefix})"
    - if editable && (collection.collection_type == 'uncollected' || collection.involved_authorities.where(authority_id: authority_id).present?) # only show editable collections for collections where this particular author is a principal contributor
      = render partial: 'shared/manage_collection', locals: { collection: collection, title: collection.title }
    - else
      - children = toc_node.children_by_role(role, authority_id)
      - unless children.empty?
        %ul.toclist
          = render partial: 'authors/toc_node', collection: children,
                  locals: { role: role, authority_id: authority_id, editable: editable }
