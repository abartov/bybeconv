%link{ rel:'stylesheet', href:'https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.0.0-alpha14/css/tempusdominus-bootstrap-4.min.css'}
%script{ src: 'https://use.fontawesome.com/3f861a49f5.js'}

- form_id = 'authors_filters'
= form_tag(authors_path, remote: true, method: :post, id: form_id, autocomplete: :off) do
  = hidden_field_tag(:sort_by, @sort)
  .by-card-content-v02#filters_panel
    .headline-2-v02= t(:filter_by)
    %span.reset.linkcolor.pointer= t(:reset_filter)
    = render layout: 'shared/collapsible_block', locals: { container_name: 'collfauthor', title: t(:name) } do
      %input.field-v02.field-without-label#search_input{
        name: 'search_input', placeholder: t(:first_last_name), type: :text, value: @search_input
      }

    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :gender,
                       title: t(:author_gender),
                       field_name: :ckb_genders,
                       all_values: Person.genders.keys,
                       selected_values: @genders,
                       facet: @gender_facet }

    - labels = Authority.intellectual_properties.keys.index_with { |key| textify_intellectual_property(key) }
    - icons = Authority.intellectual_properties.keys.index_with { |key| intellectual_property_glyph(key) }
    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :intellectual_property,
                       title: Authority.human_attribute_name(:intellectual_property),
                       field_name: :ckb_intellectual_property,
                       all_values: Authority.intellectual_properties.keys,
                       labels: labels,
                       selected_values: @intellectual_property_types,
                       facet: @intellectual_property_facet,
                       icons: icons }

    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :genre,
                       title: t(:genres),
                       field_name: :ckb_genres,
                       all_values: Work::GENRES,
                       labels: Work::GENRES.index_with { |genre| textify_genre(genre) },
                       selected_values: @genres,
                       facet: @genre_facet,
                       icons: Work::GENRES.index_with { |g| glyph_for_genre(g) } }

    = render partial: 'shared/filters/checkbox_group',
             locals: { group_name: :period,
                       title: t(:periods),
                       field_name: :ckb_periods,
                       all_values: Expression.periods.keys,
                       selected_values: @periods,
                       facet: @period_facet }

    = render layout: 'shared/collapsible_block', locals: { container_name: 'collftags', title: t(:tags) } do
      = autocomplete_field_tag :tagstr, '', autocomplete_tag_name_path,
                               id_element: '#tag_id',
                               'data-noMatchesLabel' => t(:no_matches_found),
                               class: 'field-v02 field-without-label author-name-field',
                               id: 'tags', placeholder: t(:tag)
      = hidden_field_tag :tag_ids, @tag_ids, id: 'tag_ids'

    = render layout: 'shared/collapsible_block', locals: { container_name: 'collfdate', title: t(:thedate) } do
      .search-mobile-switch
        %button.search-mobile-option.datetype#birth= t(:birth_year)
        %button.search-mobile-option.datetype#death= t(:death_year)
        %button.search-mobile-option.datetype#uploaded= t(:upload)
        = hidden_field_tag(:date_type, '', id: 'date_type')
      %break
      .dates-range
        %input.datepicker.datetimepicker-input.field-v02.field-without-label.range-date-field#fromdate{
          placeholder: t(:year), name: :fromdate, 'data-toggle' => 'datetimepicker', 'data-target' => '#fromdate'
        }/
        .date-range-to= t(:until)
        %input.datepicker.datetimepicker-input.field-v02.field-without-label.range-date-field#todate{
          placeholder: t(:year), style: 'float: left', 'data-toggle' => 'datetimepicker', name: :todate,
          'data-target' => '#todate'
        }/

    = render partial: 'shared/filters/languages', locals: { facet: @language_facet, selected_values: @languages }

    = hidden_field_tag(:search_after_value, nil)
    = hidden_field_tag(:search_after_id, nil)
    = hidden_field_tag(:page, 1)
    = hidden_field_tag(:reverse, 'false')
    = hidden_field_tag(:to_letter, @to_letter)
    .mobile-only
      .bottom-button-area
        %button.by-button-v02#apply_mobile_filters{ type: :submit }= t(:apply_mobile_filters)

:javascript
  $(document).ready(function() {
    $('#sort_by_select').val("#{@sort}");
    $('.datetype').click(function(e) {
      e.preventDefault();
      $('.datetype').removeClass('active');
      $(this).addClass('active');
      $('#date_type').val($(this).attr('id'));
    });

    $('#tags').on('railsAutocomplete.select', function(event, data){
      event.preventDefault();
      tag_id = data.item.tag_id.toString();
      $('#tag_ids').val( $('#tag_ids').val() == '' ? tag_id : $('#tag_ids').val()+','+tag_id);
      submit_filters();
    });

    if (!isMobile()) {
      // On Desktop we automatically submit form after some values were changed by user
      var submit_timeout = null;
      $('##{form_id}').change(function() {
          if(submit_timeout != null){
            window.clearTimeout(submit_timeout);
          }
          resetPagination();
          submit_timeout = window.setTimeout(submit_filters, 300);
      });
    }

    $('.reset').click(function(){
      $('#authors_filters').find(':input').each(function() {
        switch(this.type) {
            case 'password':
            case 'select-multiple':
            case 'select-one':
            case 'text':
            case 'textarea':
                $(this).val('');
                break;
            case 'checkbox':
            case 'radio':
                this.checked = false;
        }
      });
      resetPagination();
      submit_filters();
    });

    if("#{@datetype}" == "") {
      $('#birth').addClass('active');
      $('#date_type').val('birth');
    } else {
      $("##{@datetype}").addClass('active');
      $('#date_type').val("#{@datetype}");
    }
    $('.datepicker').datetimepicker({
      viewMode: 'years',
      rtl: true,
      format: 'L',
      locale: 'he',
      format: 'YYYY',
      maxDate: '#{@maxdate}',
      useCurrent: false,
      widgetPositioning: {horizontal: 'right', vertical: 'auto'},
      icons: {
        previous: 'fa fa-chevron-right',
        next: 'fa fa-chevron-left',
      }
    }).on('hide.datetimepicker', function(e){
      window.setTimeout(submit_filters, 2000);
    });

    if("#{@fromdate}" != "") {
      $('#fromdate').val("#{@fromdate}");
    }
    if("#{@todate}" != "") {
      $('#todate').val("#{@todate}");
    }
    $('#authors').bind('railsAutocomplete.select', function(event, data){
      event.preventDefault();
      $('#search_type').val('authorname');
      submit_filters();
    });
    $('#apply_mobile_filters').click(function() {
      resetPagination();
      $('#sort_filter_panel').hide();
      $('#thelist').show();
      $('html').scrollTop($('#thelist').offset().top);
    });
  });
