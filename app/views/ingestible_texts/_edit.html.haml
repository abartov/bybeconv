- text = ingestible.texts[index]
.container-fluid#ingestible_edit_texts
  = form_for [ingestible, text], url: ingestible_text_path(ingestible, index), method: :patch do |f|
    .row
      .col-sm-3
      .col-sm-6
        %b= t(:text_n_of_m, n: index + 1, m: ingestible.texts.length)
        - if ingestible.toc_buffer.present?
          = t(:and_n_placeholders, n: ingestible.toc_buffer.lines.count - ingestible.texts.length)
        - if ingestible.decode_toc.select{|x| x[1] == text.title && x[0] == 'yes'}.blank?
          %b.redbg= t('.not_in_toc')
      .col-sm-3
    .row
      .col-sm-2
        - if index > 0
          = link_to t('.previous'),
                    edit_ingestible_text_path(ingestible, index - 1),
                    class: 'btn btn-primary form-control',
                    remote: true
        %div{style: 'display:flex; flex-direction:column;  justify-content: space-between;'}
          %button.btn-small-outline-v02#add_stanza_break
            %b.btn-text-v02= t(:add_stanza_break)
          %button.btn-small-outline-v02#add_angled_brackets{ style: 'display:unset' }
            %b.btn-text-v02= t(:add_angled_brackets)
          %button.btn-small-outline-v02#remove_angled_brackets{ style: 'display:unset' }
            %b.btn-text-v02= t(:remove_angled_brackets)
          %button.btn-small-outline-v02#minuses_to_makafim{ style: 'display:unset' }
            %b.btn-text-v02= t(:minuses_to_makafim)

      .col-sm-8
        .row
          .col-sm-2
            %label.control-label= IngestibleText.human_attribute_name(:title)

          .col-sm-10
            .form-control= f.text_field :title
      .col-sm-2
        - if index < ingestible.texts.length - 1
          = link_to t('.next'),
                    edit_ingestible_text_path(ingestible, index + 1),
                    class: 'btn btn-primary form-control',
                    remote: true
    .markdown_container.row
      .col-sm-3
        = f.text_area :content, class: 'textarea100 markdown'
      .col-sm-9
        %h2= t(:display_text)
        #buffer_preview{ style: 'padding-left:10px;padding-right:15px;background:#d2cfcf; overflow-y:auto' }
          != raw(MarkdownToHtml.call(text.content))
    .actions
      = f.submit t(:save), class: 'btn btn-primary btn-sm', remote: true
= render partial: 'shared/markdown_utils', locals: { container_id: 'ingestible_edit_texts', element_id: 'ingestible_text_content' }