.container-fluid{style: 'position:relative;'}
  - if collection
    - unless focused
      .collection_action_btns
        .collection_focus_button.by-button-v02
          %b= link_to '‚§ù', collection_manage_path(collection.id), class: 'white'
    .collection.connectable{id: "coll_#{collection.id}", style:'min-height:40px'}
      - collection.collection_items.each do |ci|
        .collection_draggable_item{id: "collitem_#{ci.id}"}
          .by-card-v02
            .drag-handle{title: t(:coll_drag_tt)}
              .handle
            .draggable-content
              - if ci.item.nil?
                %b= t(:paratext)+': '
                = ci.alt_title
              - elsif ci.item.class == Collection
                .headline-2-v02
                  = textify_collection_type(ci.item.collection_type)+': '
                  = link_to collection_item_string(ci), default_link_by_class(ci.item.class, ci.item.id)
                  - if ci.item.collection_type == 'volume' && ci.item.publication.present?
                    %br
                    = "#{ci.item.publication.publisher_line} #{ci.item.publication.pub_year}"
                  .collection_insert_button.by-button-v02{style: 'width: 40px; justify-content: center; margin-top:10px;'}
                    %b= link_to '+', new_collection_item_path(collection_id: collection.id), remote: true, class: 'white'
                %div{style: 'margin-right: 25px;'}
                  = render partial: 'shared/collection', locals: {collection: ci.item, focused: false}
              - else
                .headline-3-v02
                  = t(:text)+': '
                  = link_to collection_item_string(ci), default_link_by_class(ci.item.class, ci.item.id)

:javascript
  $(document).ready(function(){
    $("#coll_#{collection.id}").sortable({
      handle: '.drag-handle',
      connectWith: '.collection.connectable',
      dropOnEmpty: true,
      start: function(e, ui) {
        // creates a temporary attribute on the element with the old index
        $(this).attr('data-previndex', ui.item.index());
        ui.item.attr('data-previndex', ui.item.index());
      },
      update: function(e, ui) {
        // gets the new and old index then removes the temporary attribute
        var newIndex = ui.item.index() + 1;
        var oldIndex = parseInt($(this).attr('data-previndex')) + 1;
        var element_id = ui.item.attr('id').replace('collitem_','');
        $(this).removeAttr('data-previndex');

        ///code to pass the data using AJAX
        if (newIndex != oldIndex) {
          $.post('#{collection_apply_drag_path(collection.id)}', { coll_item_id: element_id, old_pos: oldIndex, new_pos: newIndex} );
        }
      },
      receive: function(event, ui) {
        $.post('#{collection_transplant_item_path(collection.id)}', { dest_coll_id: this.id.replace('coll_',''), src_coll_id: ui.sender[0].id.replace('coll_',''), item_id: ui.item[0].id.replace('collitem_',''), old_pos: parseInt(ui.item.attr('data-previndex'))+1, new_pos: ui.item.index() + 1} );
        event.stopPropagation();
      }         
    });
  });