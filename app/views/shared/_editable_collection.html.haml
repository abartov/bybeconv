.editable_coll
  .button_series
    .collection-btn.delete-collection
      = link_to t(:delete),
                collection_path(collection.id),
                method: :delete,
                remote: true,
                data: { confirm: t(:confirm_delete_collection) },
                class: 'by-button-v02 by-button-secondary-v02'
    .collection_action_btns
      - unless focused
        .collection_insert_all_siblings.by-button-v02{title: t(:insert_all_siblings)}
          %b.white= '⇇'
        .collection_focus_button.by-button-v02{title: t(:focus_on_this_collection)}
          %b= link_to '⤝', collection_manage_path(collection.id), class: 'white'
  - if collection
    .container-fluid{ style: 'position:relative;', id: "#{nonce}_coll_container_#{collection.id}" }
      .collection-mask{ style: 'display:none;position:absolute;top:0;left:0;width:100%;height:100%;background:rgba(255,255,255,0.7);z-index:1000;' }
      .collection.connectable.collapse.show{ id: "#{nonce}_coll_#{collection.id}", style: 'min-height:40px;background-color: #e0e0e0;', 'data-nonce': nonce, 'data-collection-id': collection.id }
        - collection.collection_items.each do |ci|
          - should_focus_on_fresh_item = (fresh.present? && fresh.id == ci.id) ? 'true' : 'false'
          .collection_draggable_item{ id: "#{nonce}_collitem_#{ci.id}", 'data-focus-on-me': should_focus_on_fresh_item }
            .by-card-v02
              .drag-handle{ title: t(:coll_drag_tt) }
                .handle
              .draggable-content{ 'data-collection-id': (ci.item.kind_of?(Collection) ? ci.item_id : collection.id) }
                - if ci.paratext # a paratext (with markdown)
                  .editable{ id: "#{nonce}_editable_#{ci.id}" }
                    %b #{t(:paratext)}:
                    %span{ id: "#{nonce}_ci_title_#{ci.id}" }= ci.alt_title
                    = link_to t(:remove), collection_item_path(ci.id), method: :delete, remote: true, data: { confirm: t(:confirm_delete_collection_item) }, class: 'collection-btn', style: 'float: left;z-index:5;'
                    .paramarkdown!= MultiMarkdown.new(ci.markdown).to_html
                  .editable_edit{ style: 'display:none;' }
                    = form_for ci, url: collection_item_path(ci.id), method: :put, remote: true do |f|
                      = f.label :alt_title, t(:title_only_if_needed)
                      = f.text_field :alt_title, class: 'form-control'
                      = f.text_area :markdown, class: 'form-control', rows: 4
                      = f.hidden_field :nonce, value: nonce
                      = f.submit t(:save), class: 'by-button-v02', style: 'display:inline-block;'
                      .by-button-v02.cancel_editable_edit{ style: 'width:100px; display:inline-block;' }= t(:cancel)

                - elsif ci.item.nil? # a placeholder or paratext (no markdown)
                  .editable{ id: "#{nonce}_editable_#{ci.id}", style: 'margin-bottom: 10px;' }
                    %b #{t(:placeholder_item)}:
                    %span{ id: "#{nonce}_ci_title_#{ci.id}" }= ci.alt_title
                    = link_to t(:remove), collection_item_path(ci.id), method: :delete, remote: true, data: { confirm: t(:confirm_delete_collection_item) }, class: 'collection-btn', style: 'float: left;'
                  .editable_edit{ style: 'display:none;' }
                    = form_for ci, url: collection_item_path(ci.id), method: :put, remote: true do |f|
                      = f.label :alt_title, t(:title)
                      - if ci.paratext
                        = f.text_area :markdown, class: 'form-control', rows: 4
                      - else
                        = f.text_field :alt_title, class: 'form-control'
                      = f.hidden_field :nonce, value: nonce
                      = f.submit t(:save), class: 'by-button-v02', style: 'display:inline-block;'
                      .by-button-v02.cancel_editable_edit{ style: 'width:100px; display:inline-block;' }= t(:cancel)
                - elsif ci.item.kind_of?(Collection)
                  - if ci.item.collection_type != 'series' # what is the reason for this exception?
                    = link_to t(:remove), collection_item_path(ci.id), method: :delete, remote: true, data: { confirm: t(:confirm_delete_collection_item) }, class: 'collection-btn', style: 'float: left;'
                  %div.cwrapper{id: "cwrapper_#{ci.item.id}", 'data-nonce': nonce, 'data-collection-id': ci.item.id}
                    .headline-2-v02{ 'data-nonce': nonce }
                      #{textify_collection_type(ci.item.collection_type)}:
                      = collection_item_string(ci)
                      - if ci.item.collection_type == 'volume' && ci.item.publication.present?
                        %br
                        #{ci.item.publication.publisher_line} #{ci.item.publication.pub_year}
                      .button_series
                        .collection_insert_button.by-button-v02
                          %b.white= '+'
                        .coll_toggle.by-button-v02{ data: { target: "##{nonce}_coll_#{ci.item_id}", toggle: :collapse }, title: t(:collapse_collection) }
                          %b.white= '↕'
                    %div.subcollection{ style: 'margin-right: 25px;' }
                      - if @colls_traversed.include?(ci.item.id)
                        %b= t(:collection_circular_reference)
                      - else
                        - @colls_traversed << ci.item.id
                        = render partial: 'shared/editable_collection', locals: { collection: ci.item, focused: false, nonce: nonce, fresh: fresh }
                - else
                  = link_to t(:remove), collection_item_path(ci.id), method: :delete, remote: true, data: { confirm: t(:confirm_delete_collection_item) }, class: 'collection-btn', style: 'float: left;'
                  .headline-3-v02
                    #{t(:text)}:
                    = link_to collection_item_string(ci), default_link_by_class(ci.item.class, ci.item.id)

:javascript
  $(document).ready(function(){
    var $container = $("##{nonce}_coll_container_#{collection.id}");
    var $mask = $container.find('.collection-mask');

    $("##{nonce}_coll_#{collection.id}").sortable({
      handle: '.drag-handle',
      connectWith: '.collection.connectable',
      dropOnEmpty: true,
      start: function(e, ui) {
        // creates a temporary attribute on the element with the old index
        $(this).attr('data-previndex', ui.item.index());
        ui.item.attr('data-previndex', ui.item.index());
      },
      update: function(e, ui) {
        var draggedOut = this !== ui.item.parent()[0] && !$.contains(this, ui.item.parent()[0]);
        var draggedIn = ui.sender !== null;
        var sameList = !draggedOut && !draggedIn;

        if (sameList) {
          // gets the new and old index then removes the temporary attribute
          var newIndex = ui.item.index();
          var oldIndex = parseInt($(this).attr('data-previndex'));
          $(this).removeAttr('data-previndex');

          ///code to pass the data using AJAX
          if (newIndex != oldIndex) {
            $mask.show();
            $.post(
              '#{drag_item_collection_path(collection)}',
              { old_index: oldIndex, new_index: newIndex }
            ).always(function() {
              $mask.hide();
            });
          }
        } // inter-list drag is handled by the receive event
      },
      receive: function(event, ui) {
        $mask.show();
        $.post(
          '#{collection_transplant_item_path(collection.id)}',
          {
            dest_coll_id: this.id.replace('#{nonce}_coll_',''),
            src_coll_id: ui.sender[0].id.replace('#{nonce}_coll_',''),
            item_id: ui.item[0].id.replace('#{nonce}_collitem_',''),
            old_pos: parseInt(ui.item.attr('data-previndex')) + 1,
            new_pos: ui.item.index() + 1
          }
        ).always(function() {
          $mask.hide();
        });
        event.stopPropagation();
      }
    });
  });
